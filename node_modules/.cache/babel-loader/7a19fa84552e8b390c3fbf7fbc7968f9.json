{"ast":null,"code":"import \"antd/es/form/style\";\nimport _Form from \"antd/es/form\";\nimport \"antd/es/upload/style\";\nimport _Upload from \"antd/es/upload\";\nimport \"antd/es/message/style\";\nimport _message from \"antd/es/message\";\nimport \"antd/es/icon/style\";\nimport _Icon from \"antd/es/icon\";\nimport \"antd/es/card/style\";\nimport _Card from \"antd/es/card\";\nimport \"antd/es/select/style\";\nimport _Select from \"antd/es/select\";\nvar _jsxFileName = \"/Users/chenanran/WebstormProjects/iCube-master/src/AILab/imgProcess/tagImage.js\";\nimport React from \"react\";\nimport axios from 'axios'; //import apis from '@/services/api';\n\nimport reqwest from 'reqwest';\n//定义后台返回数据类型\nlet responseData = {\n  score: '',\n  root: '',\n  baike_info: {},\n  keyword: ''\n};\nlet img = {\n  imgUrl: ''\n};\nconst Option = _Select.Option;\nconst Meta = _Card.Meta;\n\nfunction getBase64(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    reader.onload = () => resolve(reader.result);\n\n    reader.onerror = error => reject(error);\n  });\n}\n\nclass Demo extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: false\n    };\n\n    this.handleChange = ({\n      fileList\n    }) => this.setState({\n      fileList\n    });\n  }\n\n  handleClick() {\n    img.imgUrl = '';\n    alert(img.imgUrl);\n  }\n\n  render() {\n    const uploadButton = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(_Icon, {\n      type: this.state.loading ? 'loading' : 'plus',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"ant-upload-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"\\u4E0A\\u4F20\"));\n    const imageUrl = this.state.imageUrl;\n    const props = {\n      name: \"avatar\",\n      showUploadList: false,\n      //设置只上传一张图片，根据实际情况修改\n      customRequest: info => {\n        //手动上传\n        const formData = new FormData();\n        formData.append('filename', info.file); //名字和后端接口名字对应\n\n        formData.append('recognize_type', \"1\");\n        reqwest({\n          url: 'http://www.icube.fun:8000/image_recognize/',\n          //上传url\n          method: 'post',\n          processData: false,\n          data: formData,\n          success: res => {\n            //上传成功回调\n            _message.success(\"success\");\n\n            var data = JSON.parse(res);\n            console.log(data);\n            responseData = data;\n            console.log(\"------\");\n\n            if (res.statusCode === 0) {\n              this.setState({\n                imageUrl: res.imageUrl\n              });\n\n              _message.success('上传成功！');\n\n              responseData = data;\n            }\n          },\n          error: () => {\n            //上传失败回调\n            _message.error('上传失败！');\n          }\n        });\n      },\n      onRemove: file => {\n        //删除图片调用\n        this.setState(state => {\n          const index = state.fileList.indexOf(file);\n          const newFileList = state.fileList.slice();\n          newFileList.splice(index, 1);\n          return {\n            fileList: newFileList\n          };\n        });\n      },\n      listType: \"picture-card\",\n      className: \"avatar-uploader\",\n      beforeUpload: file => {\n        //控制上传图片格式\n        const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\n\n        if (!isJpgOrPng) {\n          _message.error('您只能上传JPG/PNG 文件!');\n\n          return;\n        }\n\n        const isLt2M = file.size / 1024 / 1024 < 2;\n\n        if (!isLt2M) {\n          _message.error('图片大小必须小于2MB!');\n\n          return;\n        }\n\n        return isJpgOrPng && isLt2M;\n      }\n    };\n    return React.createElement(\"div\", {\n      style: {\n        marginLeft: 500\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(_Upload, Object.assign({}, props, {\n      listType: \"picture-card\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), img.imgUrl ? React.createElement(\"img\", {\n      src: img.imgUrl,\n      alt: \"avatar\",\n      style: {\n        width: '100%',\n        marginLeft: 500\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }) : uploadButton), React.createElement(_Card, {\n      title: \"\\u8FD9\\u5F20\\u56FE\\u7247\\u7684\\u6807\\u7B7E\",\n      bordered: false,\n      style: {\n        width: 300,\n        marginLeft: 500,\n        background: '#FAFAFA',\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, responseData.root), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, responseData.keyword)));\n  }\n\n}\n\nconst WrappedDemo2 = _Form.create({\n  name: 'validate_other'\n})(Demo);\n\nexport default WrappedDemo2;","map":{"version":3,"sources":["/Users/chenanran/WebstormProjects/iCube-master/src/AILab/imgProcess/tagImage.js"],"names":["React","axios","reqwest","responseData","score","root","baike_info","keyword","img","imgUrl","Option","Meta","getBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","Demo","Component","state","loading","handleChange","fileList","setState","handleClick","alert","render","uploadButton","imageUrl","props","name","showUploadList","customRequest","info","formData","FormData","append","url","method","processData","data","success","res","JSON","parse","console","log","statusCode","onRemove","index","indexOf","newFileList","slice","splice","listType","className","beforeUpload","isJpgOrPng","type","isLt2M","size","marginLeft","width","background","textAlign","WrappedDemo2","create"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,OAAP,MAAoB,SAApB;AAqBA;AACA,IAAIC,YAAY,GAAC;AACbC,EAAAA,KAAK,EAAC,EADO;AAEbC,EAAAA,IAAI,EAAC,EAFQ;AAGbC,EAAAA,UAAU,EAAC,EAHE;AAIbC,EAAAA,OAAO,EAAC;AAJK,CAAjB;AAOA,IAAIC,GAAG,GAAC;AACJC,EAAAA,MAAM,EAAC;AADH,CAAR;MAIQC,M,WAAAA,M;MACAC,I,SAAAA,I;;AAER,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;AACrB,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,UAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,IAAAA,MAAM,CAACE,aAAP,CAAqBN,IAArB;;AACAI,IAAAA,MAAM,CAACG,MAAP,GAAgB,MAAML,OAAO,CAACE,MAAM,CAACI,MAAR,CAA7B;;AACAJ,IAAAA,MAAM,CAACK,OAAP,GAAiBC,KAAK,IAAIP,MAAM,CAACO,KAAD,CAAhC;AACH,GALM,CAAP;AAMH;;AAED,MAAMC,IAAN,SAAmBxB,KAAK,CAACyB,SAAzB,CAAmC;AAAA;AAAA;AAAA,SAC/BC,KAD+B,GACvB;AACJC,MAAAA,OAAO,EAAE;AADL,KADuB;;AAAA,SAU/BC,YAV+B,GAUhB,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAkB,KAAKC,QAAL,CAAc;AAAED,MAAAA;AAAF,KAAd,CAVF;AAAA;;AAK/BE,EAAAA,WAAW,GAAG;AACVvB,IAAAA,GAAG,CAACC,MAAJ,GAAW,EAAX;AACAuB,IAAAA,KAAK,CAACxB,GAAG,CAACC,MAAL,CAAL;AACH;;AAIDwB,EAAAA,MAAM,GAAG;AAEL,UAAMC,YAAY,GACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAM,MAAA,IAAI,EAAE,KAAKR,KAAL,CAAWC,OAAX,GAAqB,SAArB,GAAiC,MAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFJ,CADJ;AAFK,UAQGQ,QARH,GAQgB,KAAKT,KARrB,CAQGS,QARH;AAUL,UAAMC,KAAK,GAAG;AACVC,MAAAA,IAAI,EAAE,QADI;AAEVC,MAAAA,cAAc,EAAE,KAFN;AAEY;AACtBC,MAAAA,aAAa,EAAEC,IAAI,IAAI;AAAC;AACpB,cAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,QAAAA,QAAQ,CAACE,MAAT,CAAgB,UAAhB,EAA4BH,IAAI,CAAC3B,IAAjC,EAFmB,CAEoB;;AACvC4B,QAAAA,QAAQ,CAACE,MAAT,CAAgB,gBAAhB,EAAkC,GAAlC;AACAzC,QAAAA,OAAO,CAAC;AACJ0C,UAAAA,GAAG,EAAE,4CADD;AAC8C;AAClDC,UAAAA,MAAM,EAAE,MAFJ;AAGJC,UAAAA,WAAW,EAAE,KAHT;AAIJC,UAAAA,IAAI,EAAEN,QAJF;AAKJO,UAAAA,OAAO,EAAGC,GAAD,IAAS;AAAC;AACf,qBAAQD,OAAR,CAAgB,SAAhB;;AACA,gBAAID,IAAI,GAAGG,IAAI,CAACC,KAAL,CAAWF,GAAX,CAAX;AACAG,YAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACA5C,YAAAA,YAAY,GAAG4C,IAAf;AACAK,YAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;;AACA,gBAAIJ,GAAG,CAACK,UAAJ,KAAmB,CAAvB,EAA0B;AACtB,mBAAKxB,QAAL,CAAc;AACVK,gBAAAA,QAAQ,EAAEc,GAAG,CAACd;AADJ,eAAd;;AAGA,uBAAQa,OAAR,CAAgB,OAAhB;;AACA7C,cAAAA,YAAY,GAAG4C,IAAf;AACH;AACJ,WAlBG;AAmBJxB,UAAAA,KAAK,EAAE,MAAM;AAAC;AACV,qBAAQA,KAAR,CAAc,OAAd;AACH;AArBG,SAAD,CAAP;AAuBH,OA9BS;AA+BVgC,MAAAA,QAAQ,EAAE1C,IAAI,IAAI;AAAC;AACf,aAAKiB,QAAL,CAAcJ,KAAK,IAAI;AACnB,gBAAM8B,KAAK,GAAG9B,KAAK,CAACG,QAAN,CAAe4B,OAAf,CAAuB5C,IAAvB,CAAd;AACA,gBAAM6C,WAAW,GAAGhC,KAAK,CAACG,QAAN,CAAe8B,KAAf,EAApB;AACAD,UAAAA,WAAW,CAACE,MAAZ,CAAmBJ,KAAnB,EAA0B,CAA1B;AACA,iBAAO;AACH3B,YAAAA,QAAQ,EAAE6B;AADP,WAAP;AAGH,SAPD;AAQH,OAxCS;AAyCVG,MAAAA,QAAQ,EAAE,cAzCA;AA0CVC,MAAAA,SAAS,EAAE,iBA1CD;AA4CVC,MAAAA,YAAY,EAAElD,IAAI,IAAI;AAAC;AACnB,cAAMmD,UAAU,GAAGnD,IAAI,CAACoD,IAAL,KAAc,YAAd,IAA8BpD,IAAI,CAACoD,IAAL,KAAc,WAA/D;;AAEA,YAAI,CAACD,UAAL,EAAiB;AACb,mBAAQzC,KAAR,CAAc,kBAAd;;AACA;AACH;;AACD,cAAM2C,MAAM,GAAGrD,IAAI,CAACsD,IAAL,GAAY,IAAZ,GAAmB,IAAnB,GAA0B,CAAzC;;AACA,YAAI,CAACD,MAAL,EAAa;AACT,mBAAQ3C,KAAR,CAAc,cAAd;;AACA;AACH;;AACD,eAAOyC,UAAU,IAAIE,MAArB;AACH;AAzDS,KAAd;AA2DA,WACI;AAAK,MAAA,KAAK,EAAE;AAACE,QAAAA,UAAU,EAAC;AAAZ,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,+CACQhC,KADR;AAEI,MAAA,QAAQ,EAAC,cAFb;AAGI,MAAA,QAAQ,EAAE,KAAKR,YAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAKKpB,GAAG,CAACC,MAAJ,GAAa;AAAK,MAAA,GAAG,EAAED,GAAG,CAACC,MAAd;AAAsB,MAAA,GAAG,EAAC,QAA1B;AAAmC,MAAA,KAAK,EAAE;AAAE4D,QAAAA,KAAK,EAAE,MAAT;AAAiBD,QAAAA,UAAU,EAAC;AAA5B,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAb,GAAkGlC,YALvG,CADJ,EAaI;AAAM,MAAA,KAAK,EAAC,4CAAZ;AAAsB,MAAA,QAAQ,EAAE,KAAhC;AAAuC,MAAA,KAAK,EAAE;AAAEmC,QAAAA,KAAK,EAAE,GAAT;AAAcD,QAAAA,UAAU,EAAC,GAAzB;AAA6BE,QAAAA,UAAU,EAAE,SAAzC;AAAmDC,QAAAA,SAAS,EAAC;AAA7D,OAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIpE,YAAY,CAACE,IAAjB,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIF,YAAY,CAACI,OAAjB,CAFJ,CAbJ,CADJ;AAoBH;;AArG8B;;AA0GnC,MAAMiE,YAAY,GAAG,MAAKC,MAAL,CAAY;AAAEpC,EAAAA,IAAI,EAAE;AAAR,CAAZ,EAAwCb,IAAxC,CAArB;;AACA,eAAegD,YAAf","sourcesContent":["import React from \"react\";\nimport axios from 'axios';\n//import apis from '@/services/api';\nimport reqwest from 'reqwest';\n\nimport {\n    Form,\n    Select,\n    InputNumber,\n    Switch,\n    Radio,\n    Slider,\n    Button,\n    Upload,\n    Icon,\n    Rate,\n    Checkbox,\n    Row,\n    Col,\n    Card,\n    Modal,\n    message,\n} from 'antd';\n\n//定义后台返回数据类型\nlet responseData={\n    score:'',\n    root:'',\n    baike_info:{},\n    keyword:''\n};\n\nlet img={\n    imgUrl:''\n};\n\nconst { Option } = Select;\nconst { Meta } = Card;\n\nfunction getBase64(file) {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = error => reject(error);\n    });\n}\n\nclass Demo extends React.Component {\n    state = {\n        loading: false,\n    };\n\n    handleClick() {\n        img.imgUrl='';\n        alert(img.imgUrl);\n    };\n\n    handleChange = ({ fileList }) => this.setState({ fileList });\n\n    render() {\n\n        const uploadButton = (\n            <div>\n                <Icon type={this.state.loading ? 'loading' : 'plus'}/>\n                <div className=\"ant-upload-text\">上传</div>\n            </div>\n        );\n        const { imageUrl } = this.state;\n\n        const props = {\n            name: \"avatar\",\n            showUploadList: false,//设置只上传一张图片，根据实际情况修改\n            customRequest: info => {//手动上传\n                const formData = new FormData();\n                formData.append('filename', info.file);//名字和后端接口名字对应\n                formData.append('recognize_type', \"1\");\n                reqwest({\n                    url: 'http://www.icube.fun:8000/image_recognize/',//上传url\n                    method: 'post',\n                    processData: false,\n                    data: formData,\n                    success: (res) => {//上传成功回调\n                        message.success(\"success\");\n                        var data = JSON.parse(res);\n                        console.log(data);\n                        responseData = data;\n                        console.log(\"------\");\n                        if (res.statusCode === 0) {\n                            this.setState({\n                                imageUrl: res.imageUrl,\n                            });\n                            message.success('上传成功！');\n                            responseData = data;\n                        }\n                    },\n                    error: () => {//上传失败回调\n                        message.error('上传失败！');\n                    },\n                });\n            },\n            onRemove: file => {//删除图片调用\n                this.setState(state => {\n                    const index = state.fileList.indexOf(file);\n                    const newFileList = state.fileList.slice();\n                    newFileList.splice(index, 1);\n                    return {\n                        fileList: newFileList,\n                    };\n                });\n            },\n            listType: \"picture-card\",\n            className: \"avatar-uploader\",\n\n            beforeUpload: file => {//控制上传图片格式\n                const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\n\n                if (!isJpgOrPng) {\n                    message.error('您只能上传JPG/PNG 文件!');\n                    return;\n                }\n                const isLt2M = file.size / 1024 / 1024 < 2;\n                if (!isLt2M) {\n                    message.error('图片大小必须小于2MB!');\n                    return;\n                }\n                return isJpgOrPng && isLt2M;\n            },\n        };\n        return (\n            <div style={{marginLeft:500}}>\n                <Upload\n                    {...props}\n                    listType=\"picture-card\"\n                    onChange={this.handleChange}\n                >\n                    {img.imgUrl ? <img src={img.imgUrl} alt=\"avatar\" style={{ width: '100%' ,marginLeft:500}} /> :     uploadButton}\n                </Upload>\n                {/*<Button type=\"primary\"*/}\n                {/*    onClick={this.handleClick}*/}\n                {/*>*/}\n                {/*    我要上传！*/}\n                {/*</Button>*/}\n                <Card title=\"这张图片的标签\" bordered={false} style={{ width: 300 ,marginLeft:500,background: '#FAFAFA',textAlign:\"center\"}}>\n                    <p>{responseData.root}</p>\n                    <p>{responseData.keyword}</p>\n                </Card>\n            </div>\n        )\n    }\n\n\n}\n\nconst WrappedDemo2 = Form.create({ name: 'validate_other' })(Demo);\nexport default WrappedDemo2;"]},"metadata":{},"sourceType":"module"}