{"ast":null,"code":"import \"antd/es/form/style\";\nimport _Form from \"antd/es/form\";\nimport \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/upload/style\";\nimport _Upload from \"antd/es/upload\";\nimport \"antd/es/icon/style\";\nimport _Icon from \"antd/es/icon\";\nimport \"antd/es/message/style\";\nimport _message from \"antd/es/message\";\nimport \"antd/es/card/style\";\nimport _Card from \"antd/es/card\";\nimport \"antd/es/select/style\";\nimport _Select from \"antd/es/select\";\nvar _jsxFileName = \"/Users/chenanran/WebstormProjects/iCube-master/src/AILab/imgProcess/combineImage.js\";\nimport React from \"react\";\nimport axios from 'axios'; //import apis from '@/services/api';\n\nimport reqwest from 'reqwest';\n//定义后台返回数据类型\nlet responseData = {};\nlet responseData1 = {};\nconst Option = _Select.Option;\nconst Meta = _Card.Meta;\n\nfunction getBase64(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    reader.onload = () => resolve(reader.result);\n\n    reader.onerror = error => reject(error);\n  });\n}\n\nfunction load() {\n  document.getElementById(\"img1\").src = responseData.messageDetail.image_url;\n}\n\nfunction load1() {\n  document.getElementById(\"img2\").src = responseData1.messageDetail.image_url;\n}\n\nfunction handleClick() {\n  const formData = new FormData();\n  formData.append('submit', \"1\"); //名字和后端接口名字对应\n\n  reqwest({\n    url: 'http://www.icube.fun:8000/image_recognize/',\n    //上传url\n    method: 'post',\n    processData: false,\n    data: formData,\n    success: res => {\n      //上传成功回调\n      _message.success(\"success\");\n\n      var data = JSON.parse(res);\n      console.log(data);\n      responseData = data;\n      load();\n\n      if (res.statusCode === 0) {\n        this.setState({\n          imageUrl: res.imageUrl\n        });\n\n        _message.success('上传成功！');\n      }\n    },\n    error: () => {\n      //上传失败回调\n      _message.error('上传失败！');\n    }\n  });\n}\n\nclass Demo extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: false,\n      previewVisible: false,\n      previewImage: '',\n      fileList: [],\n      root: '',\n      keyword: ''\n    };\n\n    this.handleChange = ({\n      fileList\n    }) => this.setState({\n      fileList\n    });\n  }\n\n  handleClick() {\n    img.imgUrl = '';\n    alert(img.imgUrl);\n  }\n\n  render() {\n    const _this$state = this.state,\n          previewVisible = _this$state.previewVisible,\n          previewImage = _this$state.previewImage,\n          fileList = _this$state.fileList,\n          root = _this$state.root,\n          keyword = _this$state.keyword;\n    const uploadButton = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(_Icon, {\n      type: this.state.loading ? 'loading' : 'plus',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"ant-upload-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"\\u4E0A\\u4F20\"));\n    const imageUrl = this.state.imageUrl;\n    const props = {\n      name: \"avatar\",\n      showUploadList: false,\n      //设置只上传一张图片，根据实际情况修改\n      customRequest: info => {\n        //手动上传\n        const formData = new FormData();\n        formData.append('image', info.file); //名字和后端接口名字对应\n\n        reqwest({\n          url: 'http://www.icube.fun:8000/upload_image/',\n          //上传url\n          method: 'post',\n          processData: false,\n          data: formData,\n          success: res => {\n            //上传成功回调\n            _message.success(\"success\");\n\n            var data = JSON.parse(res);\n            console.log(data);\n            responseData = data;\n            load();\n\n            if (res.statusCode === 0) {\n              this.setState({\n                imageUrl: res.imageUrl\n              });\n\n              _message.success('上传成功！');\n            }\n          },\n          error: () => {\n            //上传失败回调\n            _message.error('上传失败！');\n          }\n        });\n      },\n      onRemove: file => {\n        //删除图片调用\n        this.setState(state => {\n          const index = state.fileList.indexOf(file);\n          const newFileList = state.fileList.slice();\n          newFileList.splice(index, 1);\n          return {\n            fileList: newFileList\n          };\n        });\n      },\n      listType: \"picture-card\",\n      className: \"avatar-uploader\",\n      beforeUpload: file => {\n        //控制上传图片格式\n        const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\n\n        if (!isJpgOrPng) {\n          _message.error('您只能上传JPG/PNG 文件!');\n\n          return;\n        }\n\n        const isLt2M = file.size / 1024 / 1024 < 2;\n\n        if (!isLt2M) {\n          _message.error('图片大小必须小于2MB!');\n\n          return;\n        }\n\n        return isJpgOrPng && isLt2M;\n      }\n    };\n    const props1 = {\n      name: \"avatar\",\n      showUploadList: false,\n      //设置只上传一张图片，根据实际情况修改\n      customRequest: info => {\n        //手动上传\n        const formData = new FormData();\n        formData.append('image', info.file); //名字和后端接口名字对应\n\n        reqwest({\n          url: 'http://www.icube.fun:8000/upload_image/',\n          //上传url\n          method: 'post',\n          processData: false,\n          data: formData,\n          success: res => {\n            //上传成功回调\n            _message.success(\"success\");\n\n            var data = JSON.parse(res);\n            console.log(data);\n            responseData1 = data;\n            load1();\n\n            if (res.statusCode === 0) {\n              this.setState({\n                imageUrl: res.imageUrl\n              });\n\n              _message.success('上传成功！');\n            }\n          },\n          error: () => {\n            //上传失败回调\n            _message.error('上传失败！');\n          }\n        });\n      },\n      onRemove: file => {\n        //删除图片调用\n        this.setState(state => {\n          const index = state.fileList.indexOf(file);\n          const newFileList = state.fileList.slice();\n          newFileList.splice(index, 1);\n          return {\n            fileList: newFileList\n          };\n        });\n      },\n      listType: \"picture-card\",\n      className: \"avatar-uploader\",\n      beforeUpload: file => {\n        //控制上传图片格式\n        const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\n\n        if (!isJpgOrPng) {\n          _message.error('您只能上传JPG/PNG 文件!');\n\n          return;\n        }\n\n        const isLt2M = file.size / 1024 / 1024 < 2;\n\n        if (!isLt2M) {\n          _message.error('图片大小必须小于2MB!');\n\n          return;\n        }\n\n        return isJpgOrPng && isLt2M;\n      }\n    };\n    return React.createElement(\"div\", {\n      style: {\n        marginLeft: 600\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, React.createElement(_Upload, Object.assign({}, props, {\n      listType: \"picture-card\",\n      fileList: fileList,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      id: \"img1\",\n      src: imageUrl,\n      alt: \"\\u539F\\u56FE\",\n      style: {\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    })), React.createElement(_Upload, Object.assign({}, props1, {\n      listType: \"picture-card\",\n      fileList: fileList,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      id: \"img2\",\n      src: imageUrl,\n      alt: \"\\u98CE\\u683C\\u56FE\",\n      style: {\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    })), React.createElement(_Button, {\n      type: \"primary\",\n      onClick: handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, \"\\u751F\\u6210\\u7ED3\\u679C\"), React.createElement(_Card, {\n      hoverable: true,\n      style: {\n        width: 240,\n        marginLeft: -60\n      },\n      cover: React.createElement(\"img\", {\n        src: responseData.url,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, React.createElement(Meta, {\n      title: \"\\u5904\\u7406\\u7ED3\\u679C\",\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst WrappedDemo1 = _Form.create({\n  name: 'validate_other'\n})(Demo);\n\nexport default WrappedDemo1;","map":{"version":3,"sources":["/Users/chenanran/WebstormProjects/iCube-master/src/AILab/imgProcess/combineImage.js"],"names":["React","axios","reqwest","responseData","responseData1","Option","Meta","getBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","load","document","getElementById","src","messageDetail","image_url","load1","handleClick","formData","FormData","append","url","method","processData","data","success","res","JSON","parse","console","log","statusCode","setState","imageUrl","Demo","Component","state","loading","previewVisible","previewImage","fileList","root","keyword","handleChange","img","imgUrl","alert","render","uploadButton","props","name","showUploadList","customRequest","info","onRemove","index","indexOf","newFileList","slice","splice","listType","className","beforeUpload","isJpgOrPng","type","isLt2M","size","props1","marginLeft","width","textAlign","WrappedDemo1","create"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from 'axios';\n//import apis from '@/services/api';\nimport reqwest from 'reqwest';\n\nimport {\n    Form,\n    Select,\n    InputNumber,\n    Switch,\n    Radio,\n    Slider,\n    Button,\n    Upload,\n    Icon,\n    Rate,\n    Checkbox,\n    Row,\n    Col,\n    Card,\n    Modal,\n    message,\n} from 'antd';\n\n//定义后台返回数据类型\nlet responseData={\n\n};\n\nlet responseData1={\n\n};\n\nconst { Option } = Select;\nconst { Meta } = Card;\n\nfunction getBase64(file) {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = error => reject(error);\n    });\n}\n\nfunction load() {\n    document.getElementById(\"img1\").src = responseData.messageDetail.image_url;\n}\n\nfunction load1() {\n    document.getElementById(\"img2\").src = responseData1.messageDetail.image_url;\n}\n\nfunction handleClick() {\n    const formData = new FormData();\n    formData.append('submit', \"1\");//名字和后端接口名字对应\n    reqwest({\n        url: 'http://www.icube.fun:8000/image_recognize/',//上传url\n        method: 'post',\n        processData: false,\n        data: formData,\n        success: (res) => {//上传成功回调\n            message.success(\"success\");\n            var data = JSON.parse(res);\n            console.log(data);\n            responseData = data;\n            load();\n\n            if (res.statusCode === 0) {\n                this.setState({\n                    imageUrl: res.imageUrl,\n                });\n                message.success('上传成功！');\n            }\n        },\n        error: () => {//上传失败回调\n            message.error('上传失败！');\n        },\n    });\n}\n\nclass Demo extends React.Component {\n    state = {\n        loading: false,\n        previewVisible: false,\n        previewImage: '',\n        fileList: [\n\n        ],\n        root:'',\n        keyword:'',\n    };\n\n    handleClick() {\n        img.imgUrl='';\n        alert(img.imgUrl);\n    };\n\n    handleChange = ({ fileList }) => this.setState({ fileList });\n\n    render() {\n        const { previewVisible, previewImage, fileList,root,keyword} = this.state;\n        const uploadButton = (\n            <div>\n                <Icon type={this.state.loading ? 'loading' : 'plus'} />\n                <div className=\"ant-upload-text\">上传</div>\n            </div>\n        );\n        const { imageUrl } = this.state;\n\n        const props = {\n            name: \"avatar\",\n            showUploadList: false,//设置只上传一张图片，根据实际情况修改\n            customRequest: info => {//手动上传\n                const formData = new FormData();\n                formData.append('image', info.file);//名字和后端接口名字对应\n                reqwest({\n                    url: 'http://www.icube.fun:8000/upload_image/',//上传url\n                    method: 'post',\n                    processData: false,\n                    data: formData,\n                    success: (res) => {//上传成功回调\n                        message.success(\"success\");\n                        var data = JSON.parse(res);\n                        console.log(data);\n                        responseData = data;\n                        load();\n                        if (res.statusCode === 0) {\n                            this.setState({\n                                imageUrl: res.imageUrl,\n                            });\n                            message.success('上传成功！');\n                        }\n                    },\n                    error: () => {//上传失败回调\n                        message.error('上传失败！');\n                    },\n                });\n            },\n            onRemove: file => {//删除图片调用\n                this.setState(state => {\n                    const index = state.fileList.indexOf(file);\n                    const newFileList = state.fileList.slice();\n                    newFileList.splice(index, 1);\n                    return {\n                        fileList: newFileList,\n                    };\n                });\n            },\n            listType: \"picture-card\",\n            className: \"avatar-uploader\",\n\n            beforeUpload: file => {//控制上传图片格式\n                const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\n\n                if (!isJpgOrPng) {\n                    message.error('您只能上传JPG/PNG 文件!');\n                    return;\n                }\n                const isLt2M = file.size / 1024 / 1024 < 2;\n                if (!isLt2M) {\n                    message.error('图片大小必须小于2MB!');\n                    return;\n                }\n                return isJpgOrPng && isLt2M;\n            },\n        };\n\n        const props1 = {\n            name: \"avatar\",\n            showUploadList: false,//设置只上传一张图片，根据实际情况修改\n            customRequest: info => {//手动上传\n                const formData = new FormData();\n                formData.append('image', info.file);//名字和后端接口名字对应\n                reqwest({\n                    url: 'http://www.icube.fun:8000/upload_image/',//上传url\n                    method: 'post',\n                    processData: false,\n                    data: formData,\n                    success: (res) => {//上传成功回调\n                        message.success(\"success\");\n                        var data = JSON.parse(res);\n                        console.log(data);\n                        responseData1 = data;\n                        load1();\n                        if (res.statusCode === 0) {\n                            this.setState({\n                                imageUrl: res.imageUrl,\n                            });\n                            message.success('上传成功！');\n                        }\n                    },\n                    error: () => {//上传失败回调\n                        message.error('上传失败！');\n                    },\n                });\n            },\n            onRemove: file => {//删除图片调用\n                this.setState(state => {\n                    const index = state.fileList.indexOf(file);\n                    const newFileList = state.fileList.slice();\n                    newFileList.splice(index, 1);\n                    return {\n                        fileList: newFileList,\n                    };\n                });\n            },\n            listType: \"picture-card\",\n            className: \"avatar-uploader\",\n\n            beforeUpload: file => {//控制上传图片格式\n                const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\n\n                if (!isJpgOrPng) {\n                    message.error('您只能上传JPG/PNG 文件!');\n                    return;\n                }\n                const isLt2M = file.size / 1024 / 1024 < 2;\n                if (!isLt2M) {\n                    message.error('图片大小必须小于2MB!');\n                    return;\n                }\n                return isJpgOrPng && isLt2M;\n            },\n        };\n        return (\n            <div style={{marginLeft:600}}>\n                <Upload {...props}\n                    listType=\"picture-card\"\n                    fileList={fileList}\n                    onChange={this.handleChange}\n                >\n                    {/*{img.imgUrl ? <img src={img.imgUrl} alt=\"avatar\" style={{ width: '100%' }} /> :     uploadButton}*/}\n                    {/*{imgNum.num >= 1 ? null : uploadButton}*/}\n                    <img id=\"img1\" src={imageUrl} alt=\"原图\" style={{ width: '100%'}} />\n                </Upload>\n                <Upload {...props1}\n                        listType=\"picture-card\"\n                        fileList={fileList}\n                        onChange={this.handleChange}\n                >\n                    {/*{img.imgUrl ? <img src={img.imgUrl} alt=\"avatar\" style={{ width: '100%' }} /> :     uploadButton}*/}\n                    {/*{imgNum.num >= 1 ? null : uploadButton}*/}\n                    <img id=\"img2\" src={imageUrl} alt=\"风格图\" style={{ width: '100%'}} />\n                </Upload>\n                <Button type=\"primary\" onClick={handleClick}>生成结果</Button>\n                {/*<Button type=\"primary\"*/}\n                {/*    onClick={this.handleClick}*/}\n                {/*>*/}\n                {/*    我要上传！*/}\n                {/*</Button>*/}\n                <Card\n                    hoverable\n                    style={{ width: 240,marginLeft:-60}}\n                    cover={<img src={responseData.url} />}\n                >\n                    <Meta title=\"处理结果\" style={{textAlign:\"center\"}}/>\n                </Card>\n            </div>\n        )\n    }\n\n}\n\nconst WrappedDemo1 = Form.create({ name: 'validate_other' })(Demo);\nexport default WrappedDemo1;"]},"metadata":{},"sourceType":"module"}