{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nexports.path2curve = path2curve;\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/* eslint-disable */\n\n/*\n * Useful things from Adobe's Snap.svg adopted to the library needs\n * source: https://github.com/alexk111/SVG-Morpheus\n */\n\n/*\n * Paths\n */\n\n\nvar spaces = \"\\t\\n\\x0B\\f\\r \\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\";\nvar pathCommand = new RegExp(\"([a-z])[\" + spaces + \",]*((-?\\\\d*\\\\.?\\\\d*(?:e[\\\\-+]?\\\\d+)?[\" + spaces + \"]*,?[\" + spaces + \"]*)+)\", \"ig\");\nvar pathValues = new RegExp(\"(-?\\\\d*\\\\.?\\\\d*(?:e[\\\\-+]?\\\\d+)?)[\" + spaces + \"]*,?[\" + spaces + \"]*\", \"ig\"); // Parses given path string into an array of arrays of path segments\n\nvar parsePathString = function parsePathString(pathString) {\n  if (!pathString) {\n    return null;\n  }\n\n  if ((typeof pathString === \"undefined\" ? \"undefined\" : (0, _typeof3[\"default\"])(pathString)) === (0, _typeof3[\"default\"])([])) {\n    return pathString;\n  } else {\n    var paramCounts = {\n      a: 7,\n      c: 6,\n      o: 2,\n      h: 1,\n      l: 2,\n      m: 2,\n      r: 4,\n      q: 4,\n      s: 4,\n      t: 2,\n      v: 1,\n      u: 3,\n      z: 0\n    },\n        data = [];\n    String(pathString).replace(pathCommand, function (a, b, c) {\n      var params = [],\n          name = b.toLowerCase();\n      c.replace(pathValues, function (a, b) {\n        b && params.push(+b);\n      });\n\n      if (name == \"m\" && params.length > 2) {\n        data.push([b].concat(params.splice(0, 2)));\n        name = \"l\";\n        b = b == \"m\" ? \"l\" : \"L\";\n      }\n\n      if (name == \"o\" && params.length == 1) {\n        data.push([b, params[0]]);\n      }\n\n      if (name == \"r\") {\n        data.push([b].concat(params));\n      } else while (params.length >= paramCounts[name]) {\n        data.push([b].concat(params.splice(0, paramCounts[name])));\n\n        if (!paramCounts[name]) {\n          break;\n        }\n      }\n    });\n    return data;\n  }\n}; // http://schepers.cc/getting-to-the-point\n\n\nvar catmullRom2bezier = function catmullRom2bezier(crp, z) {\n  var d = [];\n\n  for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n    var p = [{\n      x: +crp[i - 2],\n      y: +crp[i - 1]\n    }, {\n      x: +crp[i],\n      y: +crp[i + 1]\n    }, {\n      x: +crp[i + 2],\n      y: +crp[i + 3]\n    }, {\n      x: +crp[i + 4],\n      y: +crp[i + 5]\n    }];\n\n    if (z) {\n      if (!i) {\n        p[0] = {\n          x: +crp[iLen - 2],\n          y: +crp[iLen - 1]\n        };\n      } else if (iLen - 4 == i) {\n        p[3] = {\n          x: +crp[0],\n          y: +crp[1]\n        };\n      } else if (iLen - 2 == i) {\n        p[2] = {\n          x: +crp[0],\n          y: +crp[1]\n        };\n        p[3] = {\n          x: +crp[2],\n          y: +crp[3]\n        };\n      }\n    } else {\n      if (iLen - 4 == i) {\n        p[3] = p[2];\n      } else if (!i) {\n        p[0] = {\n          x: +crp[i],\n          y: +crp[i + 1]\n        };\n      }\n    }\n\n    d.push([\"C\", (-p[0].x + 6 * p[1].x + p[2].x) / 6, (-p[0].y + 6 * p[1].y + p[2].y) / 6, (p[1].x + 6 * p[2].x - p[3].x) / 6, (p[1].y + 6 * p[2].y - p[3].y) / 6, p[2].x, p[2].y]);\n  }\n\n  return d;\n};\n\nvar ellipsePath = function ellipsePath(x, y, rx, ry, a) {\n  if (a == null && ry == null) {\n    ry = rx;\n  }\n\n  x = +x;\n  y = +y;\n  rx = +rx;\n  ry = +ry;\n\n  if (a != null) {\n    var rad = Math.PI / 180,\n        x1 = x + rx * Math.cos(-ry * rad),\n        x2 = x + rx * Math.cos(-a * rad),\n        y1 = y + rx * Math.sin(-ry * rad),\n        y2 = y + rx * Math.sin(-a * rad),\n        res = [[\"M\", x1, y1], [\"A\", rx, rx, 0, +(a - ry > 180), 0, x2, y2]];\n  } else {\n    res = [[\"M\", x, y], [\"m\", 0, -ry], [\"a\", rx, ry, 0, 1, 1, 0, 2 * ry], [\"a\", rx, ry, 0, 1, 1, 0, -2 * ry], [\"z\"]];\n  }\n\n  return res;\n};\n\nvar pathToAbsolute = function pathToAbsolute(pathArray) {\n  pathArray = parsePathString(pathArray);\n\n  if (!pathArray || !pathArray.length) {\n    return [[\"M\", 0, 0]];\n  }\n\n  var res = [],\n      x = 0,\n      y = 0,\n      mx = 0,\n      my = 0,\n      start = 0,\n      pa0;\n\n  if (pathArray[0][0] == \"M\") {\n    x = +pathArray[0][1];\n    y = +pathArray[0][2];\n    mx = x;\n    my = y;\n    start++;\n    res[0] = [\"M\", x, y];\n  }\n\n  var crz = pathArray.length == 3 && pathArray[0][0] == \"M\" && pathArray[1][0].toUpperCase() == \"R\" && pathArray[2][0].toUpperCase() == \"Z\";\n\n  for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n    res.push(r = []);\n    pa = pathArray[i];\n    pa0 = pa[0];\n\n    if (pa0 != pa0.toUpperCase()) {\n      r[0] = pa0.toUpperCase();\n\n      switch (r[0]) {\n        case \"A\":\n          r[1] = pa[1];\n          r[2] = pa[2];\n          r[3] = pa[3];\n          r[4] = pa[4];\n          r[5] = pa[5];\n          r[6] = +pa[6] + x;\n          r[7] = +pa[7] + y;\n          break;\n\n        case \"V\":\n          r[1] = +pa[1] + y;\n          break;\n\n        case \"H\":\n          r[1] = +pa[1] + x;\n          break;\n\n        case \"R\":\n          var dots = [x, y].concat(pa.slice(1));\n\n          for (var j = 2, jj = dots.length; j < jj; j++) {\n            dots[j] = +dots[j] + x;\n            dots[++j] = +dots[j] + y;\n          }\n\n          res.pop();\n          res = res.concat(catmullRom2bezier(dots, crz));\n          break;\n\n        case \"O\":\n          res.pop();\n          dots = ellipsePath(x, y, pa[1], pa[2]);\n          dots.push(dots[0]);\n          res = res.concat(dots);\n          break;\n\n        case \"U\":\n          res.pop();\n          res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n          r = [\"U\"].concat(res[res.length - 1].slice(-2));\n          break;\n\n        case \"M\":\n          mx = +pa[1] + x;\n          my = +pa[2] + y;\n\n        default:\n          for (j = 1, jj = pa.length; j < jj; j++) {\n            r[j] = +pa[j] + (j % 2 ? x : y);\n          }\n\n      }\n    } else if (pa0 == \"R\") {\n      dots = [x, y].concat(pa.slice(1));\n      res.pop();\n      res = res.concat(catmullRom2bezier(dots, crz));\n      r = [\"R\"].concat(pa.slice(-2));\n    } else if (pa0 == \"O\") {\n      res.pop();\n      dots = ellipsePath(x, y, pa[1], pa[2]);\n      dots.push(dots[0]);\n      res = res.concat(dots);\n    } else if (pa0 == \"U\") {\n      res.pop();\n      res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n      r = [\"U\"].concat(res[res.length - 1].slice(-2));\n    } else {\n      for (var k = 0, kk = pa.length; k < kk; k++) {\n        r[k] = pa[k];\n      }\n    }\n\n    pa0 = pa0.toUpperCase();\n\n    if (pa0 != \"O\") {\n      switch (r[0]) {\n        case \"Z\":\n          x = +mx;\n          y = +my;\n          break;\n\n        case \"H\":\n          x = r[1];\n          break;\n\n        case \"V\":\n          y = r[1];\n          break;\n\n        case \"M\":\n          mx = r[r.length - 2];\n          my = r[r.length - 1];\n\n        default:\n          x = r[r.length - 2];\n          y = r[r.length - 1];\n      }\n    }\n  }\n\n  return res;\n};\n\nvar l2c = function l2c(x1, y1, x2, y2) {\n  return [x1, y1, x2, y2, x2, y2];\n};\n\nvar q2c = function q2c(x1, y1, ax, ay, x2, y2) {\n  var _13 = 1 / 3,\n      _23 = 2 / 3;\n\n  return [_13 * x1 + _23 * ax, _13 * y1 + _23 * ay, _13 * x2 + _23 * ax, _13 * y2 + _23 * ay, x2, y2];\n};\n\nvar a2c = function a2c(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n  // for more information of where this math came from visit:\n  // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n  var _120 = Math.PI * 120 / 180,\n      rad = Math.PI / 180 * (+angle || 0),\n      res = [],\n      xy,\n      rotate = function rotate(x, y, rad) {\n    var X = x * Math.cos(rad) - y * Math.sin(rad),\n        Y = x * Math.sin(rad) + y * Math.cos(rad);\n    return {\n      x: X,\n      y: Y\n    };\n  };\n\n  if (!recursive) {\n    xy = rotate(x1, y1, -rad);\n    x1 = xy.x;\n    y1 = xy.y;\n    xy = rotate(x2, y2, -rad);\n    x2 = xy.x;\n    y2 = xy.y;\n    var cos = Math.cos(Math.PI / 180 * angle),\n        sin = Math.sin(Math.PI / 180 * angle),\n        x = (x1 - x2) / 2,\n        y = (y1 - y2) / 2;\n    var h = x * x / (rx * rx) + y * y / (ry * ry);\n\n    if (h > 1) {\n      h = Math.sqrt(h);\n      rx = h * rx;\n      ry = h * ry;\n    }\n\n    var rx2 = rx * rx,\n        ry2 = ry * ry,\n        k = (large_arc_flag == sweep_flag ? -1 : 1) * Math.sqrt(Math.abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n        cx = k * rx * y / ry + (x1 + x2) / 2,\n        cy = k * -ry * x / rx + (y1 + y2) / 2,\n        f1 = Math.asin(((y1 - cy) / ry).toFixed(9)),\n        f2 = Math.asin(((y2 - cy) / ry).toFixed(9));\n    f1 = x1 < cx ? Math.PI - f1 : f1;\n    f2 = x2 < cx ? Math.PI - f2 : f2;\n    f1 < 0 && (f1 = Math.PI * 2 + f1);\n    f2 < 0 && (f2 = Math.PI * 2 + f2);\n\n    if (sweep_flag && f1 > f2) {\n      f1 = f1 - Math.PI * 2;\n    }\n\n    if (!sweep_flag && f2 > f1) {\n      f2 = f2 - Math.PI * 2;\n    }\n  } else {\n    f1 = recursive[0];\n    f2 = recursive[1];\n    cx = recursive[2];\n    cy = recursive[3];\n  }\n\n  var df = f2 - f1;\n\n  if (Math.abs(df) > _120) {\n    var f2old = f2,\n        x2old = x2,\n        y2old = y2;\n    f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n    x2 = cx + rx * Math.cos(f2);\n    y2 = cy + ry * Math.sin(f2);\n    res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n  }\n\n  df = f2 - f1;\n  var c1 = Math.cos(f1),\n      s1 = Math.sin(f1),\n      c2 = Math.cos(f2),\n      s2 = Math.sin(f2),\n      t = Math.tan(df / 4),\n      hx = 4 / 3 * rx * t,\n      hy = 4 / 3 * ry * t,\n      m1 = [x1, y1],\n      m2 = [x1 + hx * s1, y1 - hy * c1],\n      m3 = [x2 + hx * s2, y2 - hy * c2],\n      m4 = [x2, y2];\n  m2[0] = 2 * m1[0] - m2[0];\n  m2[1] = 2 * m1[1] - m2[1];\n\n  if (recursive) {\n    return [m2, m3, m4].concat(res);\n  } else {\n    res = [m2, m3, m4].concat(res).join().split(\",\");\n    var newres = [];\n\n    for (var i = 0, ii = res.length; i < ii; i++) {\n      newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n    }\n\n    return newres;\n  }\n};\n\nfunction path2curve(path, path2) {\n  var p = pathToAbsolute(path),\n      p2 = path2 && pathToAbsolute(path2),\n      attrs = {\n    x: 0,\n    y: 0,\n    bx: 0,\n    by: 0,\n    X: 0,\n    Y: 0,\n    qx: null,\n    qy: null\n  },\n      attrs2 = {\n    x: 0,\n    y: 0,\n    bx: 0,\n    by: 0,\n    X: 0,\n    Y: 0,\n    qx: null,\n    qy: null\n  },\n      processPath = function processPath(path, d, pcom) {\n    var nx, ny;\n\n    if (!path) {\n      return [\"C\", d.x, d.y, d.x, d.y, d.x, d.y];\n    }\n\n    !(path[0] in {\n      T: 1,\n      Q: 1\n    }) && (d.qx = d.qy = null);\n\n    switch (path[0]) {\n      case \"M\":\n        d.X = path[1];\n        d.Y = path[2];\n        break;\n\n      case \"A\":\n        path = [\"C\"].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));\n        break;\n\n      case \"S\":\n        if (pcom == \"C\" || pcom == \"S\") {\n          // In \"S\" case we have to take into account, if the previous command is C/S.\n          nx = d.x * 2 - d.bx; // And reflect the previous\n\n          ny = d.y * 2 - d.by; // command's control point relative to the current point.\n        } else {\n          // or some else or nothing\n          nx = d.x;\n          ny = d.y;\n        }\n\n        path = [\"C\", nx, ny].concat(path.slice(1));\n        break;\n\n      case \"T\":\n        if (pcom == \"Q\" || pcom == \"T\") {\n          // In \"T\" case we have to take into account, if the previous command is Q/T.\n          d.qx = d.x * 2 - d.qx; // And make a reflection similar\n\n          d.qy = d.y * 2 - d.qy; // to case \"S\".\n        } else {\n          // or something else or nothing\n          d.qx = d.x;\n          d.qy = d.y;\n        }\n\n        path = [\"C\"].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n        break;\n\n      case \"Q\":\n        d.qx = path[1];\n        d.qy = path[2];\n        path = [\"C\"].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n        break;\n\n      case \"L\":\n        path = [\"C\"].concat(l2c(d.x, d.y, path[1], path[2]));\n        break;\n\n      case \"H\":\n        path = [\"C\"].concat(l2c(d.x, d.y, path[1], d.y));\n        break;\n\n      case \"V\":\n        path = [\"C\"].concat(l2c(d.x, d.y, d.x, path[1]));\n        break;\n\n      case \"Z\":\n        path = [\"C\"].concat(l2c(d.x, d.y, d.X, d.Y));\n        break;\n    }\n\n    return path;\n  },\n      fixArc = function fixArc(pp, i) {\n    if (pp[i].length > 7) {\n      pp[i].shift();\n      var pi = pp[i];\n\n      while (pi.length) {\n        pcoms1[i] = \"A\"; // if created multiple C:s, their original seg is saved\n\n        p2 && (pcoms2[i] = \"A\"); // the same as above\n\n        pp.splice(i++, 0, [\"C\"].concat(pi.splice(0, 6)));\n      }\n\n      pp.splice(i, 1);\n      ii = Math.max(p.length, p2 && p2.length || 0);\n    }\n  },\n      fixM = function fixM(path1, path2, a1, a2, i) {\n    if (path1 && path2 && path1[i][0] == \"M\" && path2[i][0] != \"M\") {\n      path2.splice(i, 0, [\"M\", a2.x, a2.y]);\n      a1.bx = 0;\n      a1.by = 0;\n      a1.x = path1[i][1];\n      a1.y = path1[i][2];\n      ii = Math.max(p.length, p2 && p2.length || 0);\n    }\n  },\n      pcoms1 = [],\n      // path commands of original path p\n  pcoms2 = [],\n      // path commands of original path p2\n  pfirst = \"\",\n      // temporary holder for original path command\n  pcom = \"\"; // holder for previous path command of original path\n\n\n  for (var i = 0, ii = Math.max(p.length, p2 && p2.length || 0); i < ii; i++) {\n    p[i] && (pfirst = p[i][0]); // save current path command\n\n    if (pfirst != \"C\") {\n      // C is not saved yet, because it may be result of conversion\n      pcoms1[i] = pfirst; // Save current path command\n\n      i && (pcom = pcoms1[i - 1]); // Get previous path command pcom\n    }\n\n    p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\n    if (pcoms1[i] != \"A\" && pfirst == \"C\") pcoms1[i] = \"C\"; // A is the only command\n    // which may produce multiple C:s\n    // so we have to make sure that C is also C in original path\n\n    fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\n    if (p2) {\n      // the same procedures is done to p2\n      p2[i] && (pfirst = p2[i][0]);\n\n      if (pfirst != \"C\") {\n        pcoms2[i] = pfirst;\n        i && (pcom = pcoms2[i - 1]);\n      }\n\n      p2[i] = processPath(p2[i], attrs2, pcom);\n\n      if (pcoms2[i] != \"A\" && pfirst == \"C\") {\n        pcoms2[i] = \"C\";\n      }\n\n      fixArc(p2, i);\n    }\n\n    fixM(p, p2, attrs, attrs2, i);\n    fixM(p2, p, attrs2, attrs, i);\n    var seg = p[i],\n        seg2 = p2 && p2[i],\n        seglen = seg.length,\n        seg2len = p2 && seg2.length;\n    attrs.x = seg[seglen - 2];\n    attrs.y = seg[seglen - 1];\n    attrs.bx = parseFloat(seg[seglen - 4]) || attrs.x;\n    attrs.by = parseFloat(seg[seglen - 3]) || attrs.y;\n    attrs2.bx = p2 && (parseFloat(seg2[seg2len - 4]) || attrs2.x);\n    attrs2.by = p2 && (parseFloat(seg2[seg2len - 3]) || attrs2.y);\n    attrs2.x = p2 && seg2[seg2len - 2];\n    attrs2.y = p2 && seg2[seg2len - 1];\n  }\n\n  return p2 ? [p, p2] : p;\n}\n\n;","map":null,"metadata":{},"sourceType":"script"}