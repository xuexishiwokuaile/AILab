{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDom from 'react-dom';\nimport { dataToArray, objectEqual } from './util';\nimport { stylesToCss } from 'style-utils';\nimport Tween from './Tween';\nimport ticker from './ticker';\n\nfunction noop() {}\n\nvar perFrame = Math.round(1000 / 60);\nvar objectOrArray = PropTypes.oneOfType([PropTypes.object, PropTypes.array]);\n\nvar TweenOne = function (_Component) {\n  _inherits(TweenOne, _Component);\n\n  function TweenOne(props) {\n    _classCallCheck(this, TweenOne);\n\n    var _this = _possibleConstructorReturn(this, (TweenOne.__proto__ || Object.getPrototypeOf(TweenOne)).call(this, props));\n\n    _initialiseProps.call(_this);\n\n    _this.rafID = -1;\n    _this.moment = props.moment || 0;\n    _this.startMoment = props.moment || 0;\n    _this.startFrame = ticker.frame;\n    _this.paused = props.paused;\n    _this.reverse = props.reverse;\n    _this.onChange = props.onChange;\n    _this.newMomentAnim = false;\n    _this.updateAnim = null;\n    _this.forced = {};\n\n    _this.setForcedJudg(props);\n\n    return _this;\n  }\n\n  _createClass(TweenOne, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.dom = ReactDom.findDOMNode(this);\n\n      if (this.dom && this.dom.nodeName !== '#text') {\n        this.start();\n      }\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var _this2 = this;\n\n      if (!this.tween && !this.dom) {\n        this.updateAnim = 'start';\n        return;\n      }\n\n      this.onChange = nextProps.onChange; // 跳帧事件 moment;\n\n      var newMoment = nextProps.moment;\n      this.newMomentAnim = false;\n\n      if (typeof newMoment === 'number' && newMoment !== this.moment) {\n        this.startMoment = newMoment;\n        this.startFrame = ticker.frame;\n\n        if (this.rafID === -1 && !nextProps.paused) {\n          this.tween.resetAnimData();\n          var style = nextProps.style;\n          this.dom.setAttribute('style', '');\n\n          if (style) {\n            Object.keys(style).forEach(function (key) {\n              _this2.dom.style[key] = stylesToCss(key, style[key]);\n            });\n          }\n\n          this.play();\n        } else {\n          this.newMomentAnim = true;\n        }\n      } // 动画处理\n\n\n      var newAnimation = nextProps.animation;\n      var currentAnimation = this.props.animation;\n      var equal = objectEqual(currentAnimation, newAnimation);\n      var styleEqual = objectEqual(this.props.style, nextProps.style); // 如果 animation 不同， 在下一帧重新动画\n\n      if (!equal) {\n        // 在有动画的情况下才可以执行 resetDefaultStyle; 避免无动画时也把 style 刷成默认状态。\n        if (nextProps.resetStyleBool && this.tween && this.rafID === -1) {\n          this.tween.resetDefaultStyle();\n        }\n\n        if (this.rafID !== -1) {\n          this.updateAnim = 'update';\n        } else if (nextProps.updateReStart) {\n          this.startFrame = ticker.frame;\n          this.updateAnim = 'start';\n        } // 只做动画，不做回调处理。。。\n\n\n        if (this.tween) {\n          this.tween.updateAnim = this.updateAnim;\n        }\n      }\n\n      if (!styleEqual) {\n        // 在动画时更改了 style, 作为更改开始数值。\n        if (this.rafID !== -1) {\n          this.updateStartStyle = true;\n        }\n      } // 暂停倒放\n\n\n      if (this.paused !== nextProps.paused || this.reverse !== nextProps.reverse) {\n        this.paused = nextProps.paused;\n        this.reverse = nextProps.reverse;\n\n        if (this.paused) {\n          this.cancelRequestAnimationFrame();\n        } else {\n          if (this.reverse && nextProps.reverseDelay) {\n            this.cancelRequestAnimationFrame();\n            ticker.timeout(this.restart, nextProps.reverseDelay);\n          } else {\n            this.restart();\n          }\n        }\n      }\n\n      this.setForcedJudg(nextProps);\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      if (!this.dom || this.dom.nodeName !== '#text') {\n        this.dom = ReactDom.findDOMNode(this);\n      }\n\n      if (this.tween) {\n        if (this.updateStartStyle && !this.updateAnim) {\n          this.tween.reStart(this.props.style);\n          this.updateStartStyle = false;\n        }\n\n        if (this.newMomentAnim) {\n          this.raf();\n        }\n      } // 样式更新了后再执行动画；\n\n\n      if (this.updateAnim === 'start' && this.dom && this.dom.nodeName !== '#text') {\n        this.start();\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.cancelRequestAnimationFrame();\n    }\n    /**\n     * @method setForcedJudg\n     * @param props\n     * QueueAnim 套在组件下面后导至子级变化。\n     * <QueueAnim component={Menu} >\n     *   <SubMenu key=\"a\" title=\"导航\">\n     *     <Item />\n     *   </SubMenu>\n     * </QueueAnim>\n     * rc-Menu 里是以 isXXX 来判断是 rc-Menu 的子级;\n     * 如: 用 isSubMenu 来处理 hover 事件\n     * 地址: https://github.com/react-component/menu/blob/master/src/MenuMixin.js#L172\n     * 暂时方案: 在组件里添加判断用的值。\n     */\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var props = _extends({}, this.props);\n\n      ['animation', 'component', 'componentProps', 'reverseDelay', 'attr', 'paused', 'reverse', 'moment', 'resetStyleBool', 'updateReStart', 'forcedJudg'].forEach(function (key) {\n        return delete props[key];\n      });\n      props.style = _extends({}, this.props.style);\n      Object.keys(props.style).forEach(function (p) {\n        if (p.match(/filter/i)) {\n          ['Webkit', 'Moz', 'Ms', 'ms'].forEach(function (prefix) {\n            return props.style[prefix + 'Filter'] = props.style[p];\n          });\n        }\n      }); // component 为空时调用子级的。。\n\n      if (!this.props.component) {\n        if (!this.props.children) {\n          return this.props.children;\n        }\n\n        var childrenProps = this.props.children.props;\n        var style = childrenProps.style,\n            className = childrenProps.className; // 合并 style 与 className。\n\n        var newStyle = _extends({}, style, props.style);\n\n        var newClassName = props.className ? props.className + ' ' + className : className;\n        return React.cloneElement(this.props.children, {\n          style: newStyle,\n          className: newClassName\n        });\n      }\n\n      return React.createElement(this.props.component, _extends({}, props, this.props.componentProps));\n    }\n  }]);\n\n  return TweenOne;\n}(Component);\n\nTweenOne.propTypes = {\n  component: PropTypes.any,\n  componentProps: PropTypes.any,\n  animation: objectOrArray,\n  children: PropTypes.any,\n  style: PropTypes.object,\n  paused: PropTypes.bool,\n  reverse: PropTypes.bool,\n  reverseDelay: PropTypes.number,\n  moment: PropTypes.number,\n  attr: PropTypes.string,\n  onChange: PropTypes.func,\n  resetStyleBool: PropTypes.bool,\n  updateReStart: PropTypes.bool,\n  forcedJudg: PropTypes.object\n};\nTweenOne.defaultProps = {\n  component: 'div',\n  componentProps: {},\n  reverseDelay: 0,\n  attr: 'style',\n  onChange: noop,\n  updateReStart: true\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this3 = this;\n\n  this.setForcedJudg = function (props) {\n    Object.keys(_this3.forced).forEach(function (key) {\n      delete _this3[key];\n      delete _this3.forced[key];\n    });\n\n    if (props.forcedJudg) {\n      Object.keys(props.forcedJudg).forEach(function (key) {\n        if (!_this3[key]) {\n          _this3[key] = props.forcedJudg[key];\n          _this3.forced[key] = 1;\n        }\n      });\n    }\n  };\n\n  this.restart = function () {\n    if (!_this3.tween) {\n      return;\n    }\n\n    _this3.startMoment = _this3.tween.progressTime;\n    _this3.startFrame = ticker.frame;\n    _this3.tween.reverse = _this3.reverse;\n    _this3.tween.reverseStartTime = _this3.startMoment;\n\n    _this3.play();\n  };\n\n  this.start = function () {\n    _this3.updateAnim = null;\n    var props = _this3.props;\n\n    if (props.animation && Object.keys(props.animation).length) {\n      _this3.tween = new Tween(_this3.dom, dataToArray(props.animation), {\n        attr: props.attr\n      }); // 预先注册 raf, 初始动画数值。\n\n      _this3.raf(); // 开始动画\n\n\n      _this3.play();\n    }\n  };\n\n  this.play = function () {\n    _this3.cancelRequestAnimationFrame();\n\n    if (_this3.paused) {\n      return;\n    }\n\n    _this3.rafID = ticker.add(_this3.raf);\n  };\n\n  this.updateAnimFunc = function () {\n    _this3.cancelRequestAnimationFrame();\n\n    _this3.startFrame = ticker.frame;\n\n    if (_this3.updateAnim === 'update') {\n      if (_this3.props.resetStyleBool && _this3.tween) {\n        _this3.tween.resetDefaultStyle();\n      }\n\n      _this3.startMoment = 0;\n    }\n  };\n\n  this.frame = function () {\n    var moment = (ticker.frame - _this3.startFrame) * perFrame + _this3.startMoment;\n\n    if (_this3.reverse) {\n      moment = (_this3.startMoment || 0) - (ticker.frame - _this3.startFrame) * perFrame;\n    }\n\n    moment = moment > _this3.tween.totalTime ? _this3.tween.totalTime : moment;\n    moment = moment <= 0 ? 0 : moment;\n\n    if (moment < _this3.moment && !_this3.reverse) {\n      _this3.tween.resetDefaultStyle();\n    }\n\n    _this3.moment = moment;\n    _this3.tween.onChange = _this3.onChange;\n\n    _this3.tween.frame(moment);\n  };\n\n  this.raf = function () {\n    _this3.frame();\n\n    if (_this3.updateAnim) {\n      if (_this3.updateStartStyle) {\n        _this3.tween.reStart(_this3.props.style);\n      }\n\n      _this3.updateAnimFunc();\n\n      _this3.start();\n    }\n\n    if (_this3.moment >= _this3.tween.totalTime && !_this3.reverse || _this3.paused || _this3.reverse && _this3.moment === 0) {\n      return _this3.cancelRequestAnimationFrame();\n    }\n  };\n\n  this.cancelRequestAnimationFrame = function () {\n    ticker.clear(_this3.rafID);\n    _this3.rafID = -1;\n  };\n};\n\nTweenOne.isTweenOne = true;\nexport default TweenOne;","map":null,"metadata":{},"sourceType":"module"}